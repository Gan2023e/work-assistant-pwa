/**
 * Êú¨Âú∞Â≠òÂÇ®Â∑•ÂÖ∑ÂáΩÊï∞
 */

// Ê∏ÖÁêÜÊçüÂùèÁöÑ localStorage Êï∞ÊçÆ
export const cleanCorruptedStorage = () => {
  try {
    console.log('üßπ ÂºÄÂßãÊ∏ÖÁêÜ localStorage...');
    
    const keysToCheck = ['user', 'token'];
    let cleanedCount = 0;
    
    keysToCheck.forEach(key => {
      const value = localStorage.getItem(key);
      if (value) {
        if (key === 'user') {
          try {
            JSON.parse(value);
            console.log(`‚úÖ ${key} Êï∞ÊçÆÊ†ºÂºèÊ≠£Á°Æ`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è ${key} Êï∞ÊçÆÊçüÂùèÔºåÊ≠£Âú®Ê∏ÖÈô§:`, value);
            localStorage.removeItem(key);
            cleanedCount++;
          }
        } else if (key === 'token') {
          if (typeof value === 'string' && value.length > 0) {
            console.log(`‚úÖ ${key} Êï∞ÊçÆÊ†ºÂºèÊ≠£Á°Æ`);
          } else {
            console.warn(`‚ö†Ô∏è ${key} Êï∞ÊçÆÊçüÂùèÔºåÊ≠£Âú®Ê∏ÖÈô§:`, value);
            localStorage.removeItem(key);
            cleanedCount++;
          }
        }
      }
    });
    
    if (cleanedCount > 0) {
      console.log(`‚úÖ Ê∏ÖÁêÜÂÆåÊàêÔºåÊ∏ÖÈô§‰∫Ü ${cleanedCount} ‰∏™ÊçüÂùèÈ°πÁõÆ`);
      return true;
    } else {
      console.log('‚úÖ localStorage Êï∞ÊçÆÊ≠£Â∏∏ÔºåÊó†ÈúÄÊ∏ÖÁêÜ');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Ê∏ÖÁêÜ localStorage Êó∂Âá∫Èîô:', error);
    return false;
  }
};

// ÂÆâÂÖ®Ëé∑Âèñ JSON Êï∞ÊçÆ
export const safeGetJSON = (key: string, defaultValue: any = null) => {
  try {
    const value = localStorage.getItem(key);
    if (!value) return defaultValue;
    return JSON.parse(value);
  } catch (error) {
    console.error(`Ëß£Êûê ${key} Â§±Ë¥•:`, error);
    localStorage.removeItem(key);
    return defaultValue;
  }
};

// ÂÆâÂÖ®ËÆæÁΩÆ JSON Êï∞ÊçÆ
export const safeSetJSON = (key: string, value: any) => {
  try {
    localStorage.setItem(key, JSON.stringify(value));
    return true;
  } catch (error) {
    console.error(`‰øùÂ≠ò ${key} Â§±Ë¥•:`, error);
    return false;
  }
};

// Ëé∑ÂèñÂ≠òÂÇ®Áä∂ÊÄÅ‰ø°ÊÅØ
export const getStorageInfo = () => {
  const info = {
    hasToken: !!localStorage.getItem('token'),
    hasUser: !!localStorage.getItem('user'),
    userValid: false,
    tokenValid: false,
    storageSize: 0
  };
  
  // Ê£ÄÊü•Áî®Êà∑Êï∞ÊçÆÊúâÊïàÊÄß
  try {
    const user = localStorage.getItem('user');
    if (user) {
      JSON.parse(user);
      info.userValid = true;
    }
  } catch (error) {
    info.userValid = false;
  }
  
  // Ê£ÄÊü• token ÊúâÊïàÊÄß
  const token = localStorage.getItem('token');
  info.tokenValid = !!(token && typeof token === 'string' && token.length > 0);
  
  // ËÆ°ÁÆóÂ≠òÂÇ®Â§ßÂ∞è
  try {
    let size = 0;
    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        size += localStorage[key].length;
      }
    }
    info.storageSize = size;
  } catch (error) {
    info.storageSize = -1;
  }
  
  return info;
}; 