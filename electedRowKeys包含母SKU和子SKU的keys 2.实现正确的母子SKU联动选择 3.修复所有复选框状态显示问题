[1mdiff --git a/frontend/src/pages/Products/Listings.tsx b/frontend/src/pages/Products/Listings.tsx[m
[1mindex 709f10e..2cbce2b 100644[m
[1m--- a/frontend/src/pages/Products/Listings.tsx[m
[1m+++ b/frontend/src/pages/Products/Listings.tsx[m
[36m@@ -377,83 +377,99 @@[m [mconst Listings: React.FC = () => {[m
   const handleRowSelection = {[m
     selectedRowKeys,[m
     onChange: (newSelectedRowKeys: any[], newSelectedRows: any[]) => {[m
[31m-      // 只保留子SKU的keys，过滤掉parent-开头的keys[m
[31m-      const childKeys = newSelectedRowKeys.filter(key => !key.startsWith('parent-'));[m
[31m-      const childRows = newSelectedRows.filter(row => row && !row.isParentRow);[m
[32m+[m[32m      // 这个方法主要由Ant Design内部调用，我们在onSelect和onSelectAll中处理具体逻辑[m
[32m+[m[32m      // 这里只是确保状态同步[m
[32m+[m[32m      const hierarchicalData = getHierarchicalData();[m
       [m
[31m-      setSelectedRowKeys(childKeys);[m
[31m-      setSelectedRows(childRows);[m
[32m+[m[32m      // 计算实际应该选中的keys（包括母SKU的联动状态）[m
[32m+[m[32m      const finalSelectedKeys = calculateFinalSelectedKeys(newSelectedRowKeys, hierarchicalData);[m
[32m+[m[41m      [m
[32m+[m[32m      // 提取子SKU记录用于外部使用[m
[32m+[m[32m      const selectedChildRows = hierarchicalData[m
[32m+[m[32m        .filter(row => !row.isParentRow && finalSelectedKeys.includes(row.key!))[m
[32m+[m[32m        .map(row => row as ParentSkuData);[m
[32m+[m[41m      [m
[32m+[m[32m      setSelectedRowKeys(finalSelectedKeys);[m
[32m+[m[32m      setSelectedRows(selectedChildRows);[m
     },[m
     onSelect: (record: ExpandedParentSkuData, selected: boolean) => {[m
[31m-      const key = record.key!;[m
[32m+[m[32m      const hierarchicalData = getHierarchicalData();[m
       [m
       if (record.isParentRow) {[m
[31m-        // 选择母SKU时，选择/取消选择所有子SKU[m
[32m+[m[32m        // 选择母SKU时，联动选择所有子SKU[m
         const childKeys = record.childSkus?.map(child => child.skuid || `child-${child.child_sku}`).filter(Boolean) || [];[m
[32m+[m[32m        const parentKey = record.key!;[m
[32m+[m[41m        [m
[32m+[m[32m        let newSelectedKeys: string[];[m
         [m
         if (selected) {[m
[31m-          // 添加所有子SKU到选择列表[m
[31m-          const newKeys = Array.from(new Set([...selectedRowKeys, ...childKeys]));[m
[31m-          const newRows = [...selectedRows];[m
[31m-          [m
[31m-          // 确保添加所有子SKU记录[m
[31m-          record.childSkus?.forEach(childSku => {[m
[31m-            const childKey = childSku.skuid || `child-${childSku.child_sku}`;[m
[31m-            if (!newRows.some(row => (row.skuid || `child-${row.child_sku}`) === childKey)) {[m
[31m-              newRows.push(childSku);[m
[31m-            }[m
[31m-          });[m
[31m-          [m
[31m-          setSelectedRowKeys(newKeys);[m
[31m-          setSelectedRows(newRows);[m
[32m+[m[32m          // 选中母SKU：添加母SKU key和所有子SKU keys[m
[32m+[m[32m          newSelectedKeys = Array.from(new Set([...selectedRowKeys, parentKey, ...childKeys]));[m
         } else {[m
[31m-          // 移除所有子SKU[m
[31m-          const newKeys = selectedRowKeys.filter(k => !childKeys.includes(k));[m
[31m-          const newRows = selectedRows.filter(row => {[m
[31m-            const rowKey = row.skuid || `child-${row.child_sku}`;[m
[31m-            return !childKeys.includes(rowKey);[m
[31m-          });[m
[31m-          setSelectedRowKeys(newKeys);[m
[31m-          setSelectedRows(newRows);[m
[32m+[m[32m          // 取消选中母SKU：移除母SKU key和所有子SKU keys[m
[32m+[m[32m          newSelectedKeys = selectedRowKeys.filter(key => key !== parentKey && !childKeys.includes(key));[m
         }[m
[32m+[m[41m        [m
[32m+[m[32m        // 提取子SKU记录[m
[32m+[m[32m        const selectedChildRows = hierarchicalData[m
[32m+[m[32m          .filter(row => !row.isParentRow && newSelectedKeys.includes(row.key!))[m
[32m+[m[32m          .map(row => row as ParentSkuData);[m
[32m+[m[41m        [m
[32m+[m[32m        setSelectedRowKeys(newSelectedKeys);[m
[32m+[m[32m        setSelectedRows(selectedChildRows);[m
       } else {[m
[31m-        // 选择子SKU[m
[32m+[m[32m        // 选择子SKU时，检查是否需要联动母SKU[m
[32m+[m[32m        const childKey = record.key!;[m
[32m+[m[32m        let newSelectedKeys: string[];[m
[32m+[m[41m        [m
         if (selected) {[m
[31m-          setSelectedRowKeys([...selectedRowKeys, key]);[m
[31m-          setSelectedRows([...selectedRows, record]);[m
[32m+[m[32m          // 选中子SKU[m
[32m+[m[32m          newSelectedKeys = [...selectedRowKeys, childKey];[m
         } else {[m
[31m-          setSelectedRowKeys(selectedRowKeys.filter(k => k !== key));[m
[31m-          setSelectedRows(selectedRows.filter(row => (row.skuid || `child-${row.child_sku}`) !== key));[m
[32m+[m[32m          // 取消选中子SKU[m
[32m+[m[32m          newSelectedKeys = selectedRowKeys.filter(key => key !== childKey);[m
         }[m
[32m+[m[41m        [m
[32m+[m[32m        // 检查母SKU状态并更新[m
[32m+[m[32m        const finalKeys = calculateFinalSelectedKeys(newSelectedKeys, hierarchicalData);[m
[32m+[m[41m        [m
[32m+[m[32m        // 提取子SKU记录[m
[32m+[m[32m        const selectedChildRows = hierarchicalData[m
[32m+[m[32m          .filter(row => !row.isParentRow && finalKeys.includes(row.key!))[m
[32m+[m[32m          .map(row => row as ParentSkuData);[m
[32m+[m[41m        [m
[32m+[m[32m        setSelectedRowKeys(finalKeys);[m
[32m+[m[32m        setSelectedRows(selectedChildRows);[m
       }[m
     },[m
     onSelectAll: (selected: boolean, selectedRows: ExpandedParentSkuData[], changeRows: ExpandedParentSkuData[]) => {[m
       if (selected) {[m
[31m-        // 全选：获取当前页面所有子SKU的key[m
[32m+[m[32m        // 全选：获取所有行的keys（包括母SKU和子SKU）[m
         const hierarchicalData = getHierarchicalData();[m
[31m-        const allChildKeys: string[] = [];[m
[31m-        const allChildRows: ParentSkuData[] = [];[m
[32m+[m[32m        const allKeys: string[] = [];[m
         [m
         hierarchicalData.forEach(row => {[m
[32m+[m[32m          if (row.key) {[m
[32m+[m[32m            allKeys.push(row.key);[m
[32m+[m[32m          }[m
[32m+[m[32m          // 如果是母SKU，还要添加其所有子SKU的keys[m
           if (row.isParentRow && row.childSkus) {[m
             row.childSkus.forEach(child => {[m
               const childKey = child.skuid || `child-${child.child_sku}`;[m
[31m-              if (childKey && !allChildKeys.includes(childKey)) {[m
[31m-                allChildKeys.push(childKey);[m
[31m-                allChildRows.push(child);[m
[32m+[m[32m              if (childKey && !allKeys.includes(childKey)) {[m
[32m+[m[32m                allKeys.push(childKey);[m
               }[m
             });[m
[31m-          } else if (!row.isParentRow) {[m
[31m-            const childKey = row.key!;[m
[31m-            if (!allChildKeys.includes(childKey)) {[m
[31m-              allChildKeys.push(childKey);[m
[31m-              allChildRows.push(row);[m
[31m-            }[m
           }[m
         });[m
         [m
[31m-        setSelectedRowKeys(allChildKeys);[m
[31m-        setSelectedRows(allChildRows);[m
[32m+[m[32m        // 提取子SKU记录[m
[32m+[m[32m        const selectedChildRows = hierarchicalData[m
[32m+[m[32m          .filter(row => !row.isParentRow)[m
[32m+[m[32m          .map(row => row as ParentSkuData);[m
[32m+[m[41m        [m
[32m+[m[32m        setSelectedRowKeys(allKeys);[m
[32m+[m[32m        setSelectedRows(selectedChildRows);[m
       } else {[m
 